<template>
    <object
      width="100%"
      height="100%"
      id="ReportViewer"
      type="application/x-grplugin6-displayviewer"
    >
      <param name="AutoRun" value="false" />
      <param
        name="SerialNo"
        value="GA1F6NS5D6CPYN6FD1G6061B8EFLI5KI0L4Y1233TR5C74WND6898W9DJRJ9Y0AR69VTS4FNJN8L2SD5J9GK3AVET4TGTG4CWFZ4V9E98AWRM5SW4F817198A3UA5Y4TZ9EBIN44QNM56BIA988BR4"
      />
      <param name="UserName" value="" />
    </object>
</template>
 
<script>
//1、变量 gr_InstallPath 等号后面的参数是插件安装文件的所在的网站目录，一般从网站的根目
//   录开始寻址，插件安装文件一定要存在于指定目录下。
//2、变量 gr_plugin_setup_url 指定WEB报表插件的安装程序下载URL。如果插件创建不成功，将提示用户从此URL下载
//   开发者可以将 gr_plugin_setup_url 的值改为自己服务器的URL，方便用户从便捷的WEB服务器下载WEB报表插件安装程序
//3、gr_Version 等号后面的参数是插件安装包的版本号，如果有新版本插件安装包，应上传新版
//   本插件安装文件到网站对应目录，并更新这里的版本号。
//4、更多详细信息请参考帮助中“报表插件(WEB报表)->在服务器部署插件安装包”部分
var gr_InstallPath = "grinstall"; //实际项目中应该写从根目录寻址的目录，如gr_InstallPath="/myapp/report/grinstall";
// var gr_plugin_setup_url = "http://www.rubylong.cn/download/grbsctl6.exe"; //WEB报表客户端安装程序的下载URL，官方网站URL
// //gr_plugin_setup_url = gr_InstallPath + "/grbsctl6.exe", //WEB报表客户端安装程序的下载URL
// var gr_plugin_required_url =
//   "http://www.rubylong.cn/gridreport/doc/plugins_browser.htm";
var gr_Version = "6,8,21,315";
var isdesigner = false;
var typeid;
var id;

//报表插件目前只能在32位浏览器中使用
var _gr_platform = window.navigator.platform;
var _gr_isX64 = _gr_platform.indexOf("64") > 0;
var _gr_agent = navigator.userAgent.toLowerCase();
var _gr_isIE = _gr_agent.indexOf("msie") > 0;
var gr_CodeBase = _gr_isIE
  ? 'codebase="' +
    gr_InstallPath +
    (_gr_isX64 ? "/grbsctl6x64.cab" : "/grbsctl6.cab") +
    "#Version=" +
    gr_Version +
    '"'
  : ""; //区分浏览器(IE or not)

var ajaxMode = 1; //指定获取报表模板与报表数据是否采用 ajax 方式。推荐采用ajax方式

function prepareViewArgs() {
  console.log("in prepareViewArgs");
  var args = extractUrls();
  console.log("in prepareViewArgs", args);

  if (!args.data) {
    args.onreportload = function(Report) {
      var QuerySQL = Report.DetailGrid
        ? Report.DetailGrid.Recordset.QuerySQL
        : Report.QuerySQL;
      console.log("QuerySQL", QuerySQL);
      if (QuerySQL) {
        SyncReportLoadData(
          Report,
          encodeURI("../../data/DataCenter.jsp?QuerySQL=" + QuerySQL)
        );
        // SyncReportLoadData(Report, encodeURI("../../data/DataCenter.jsp?QuerySQL=" + QuerySQL));
      }
    };
  }

  return args;
}

function extractUrls() {
  console.log("in  extractUrls");

  var params = getAllUrlParams();
  var reportid = params.report;
  var url = {
    reportid: reportid,
    report: urlAddRandomNo("/printNote/" + reportid + ".grf"),
  };

  if (params.data) {
    url.data = "./data/DataCenter.ashx?";
    // url.data = "./data/DataCenter.jsp?";

    if (params.report) {
      delete params.report;
    }

    for (var key in params) {
      url.data += key + "=" + params[key] + "&";
    }
    url.data = url.data.slice(0, -1);
  }
  console.log("reportid", reportid);
  document.title = "残疾考生申请结果告知书"; //改变文档标题，指示当前运行的报表

  return url;
}

function getAllUrlParams() {
  console.log("in  getAllUrlParams");
  console.log("window.location.search", window.location);
  var arr = window.location.href.split("?")[1].split("&");
  var Params = {};
  var i;

  for (i = 0; i < arr.length; i++) {
    Params[arr[i].split("=")[0]] = arr[i].split("=")[1];
  }
  console.log("arr", arr);
  console.log("Params", Params);
  return Params;
}

function urlAddRandomNo(url) {
  console.log("in  urlAddRandomNo");
  return url + "?id=" + Math.floor(Math.random() * 10000);
}

//创建报表查询显示插件，详细请查看帮助中的 IGRDisplayViewer
function InsertDisplayViewer(args) {
  console.log("in InsertDisplayViewer", args);
  args.type = "displayviewer";
  doInsertPlugin(args);
}

//参数 args 为一个对象，其下成员数据项为创建插件的相关参数，对应成员未定义采用默认值，以下为各个成员数据的简要说明：
//type：指定插件的类型名称，必须为“printviewer”、“displayviewer”与“designer”这三个值之一。
//id：指定插件在网页元素中的 id 值，查询显示器(DisplayViewer)与打印显示器(PrintViewer)的默认值为“ReportViewer”，报表设计器(Designer)的默认值为“ReportDesigner”。
//width：插件的显示宽度，“100%”为整个显示区域宽度，“500px”表示500个屏幕像素点。默认值为“100%”。
//height：插件的显示宽度，“100%”为整个显示区域高度，“500px”表示500个屏幕像素点。默认值为“100%”。
//report：获取报表模板的URL，或报表模板字符串数据。
//data：获取报表数据的URL，JSON(或XML)文本字符串，或JSON对象。
//dataUrlParams：获取报表数据的URL的附加的HTTP请求参数。
//saveurl：指定进行报表设计结果保存的URL，仅报表设计器插件用到。
//autorun：指定插件在创建之后是否自动生成并展现报表，报表设计器插件不会用到。默认为“true”。
//exparams：指定更多的插件属性参数,形如: "<param name="%ParamName%" value="%Value%">"这样的字符串，具体需要查看帮助中对应插件的API。
//oncreate：指定插件在网页中创建后需要执行的回调(事件)函数，通常可以在此回调函数中设置报表对象的响应事件。
//onreportload：指定报表模板已经加载后的回调(事件)函数，通常可以在此回调函数获取报表模板定义相关的数据，并执行相应的任务。
//ondataload：指定报表数据已经加载后的回调(事件)函数。设计器控件不会触发本事件函数。
function doInsertPlugin(args) {
  console.log("in doInsertPlugin", args);
  var type = args.type || "printviewer";
  id = args.id;
  var report = args.report || "";
  var data = args.data || "";
  var saveurl = args.saveurl || "";

  var oncreate = args.oncreate;

  var plugin;

  function _viewerStart(viewer, args) {
    console.log("in _viewerStart", viewer, args);
    var reportobj = viewer.Report;
    var torun = args.autorun || args.autorun === undefined;
    var report = args.report || viewer.ReportURL;
    var data = args.data || viewer.DataURL;
    var onreportload = args.onreportload;
    var ondataload = args.ondataload;

    function run() {
      var _report = viewer._gr_report;
      var _data = viewer._gr_data;

      if (_report && _data) {
        if (_report !== "{}") {
          reportobj.LoadFromStr(_report);
          onreportload && onreportload(reportobj);
        }

        if (!reportobj.DataLoaded) {
          reportobj.LoadDataFromXML(_data);
        }

        ondataload && ondataload(reportobj);

        torun && viewer.Start();

        viewer._gr_report = undefined;
        viewer._gr_data = undefined;
      }
    }

    if (report) {
      if (grplugin_is_url(report)) {
        grplugin_http(report, function(xmlhttp) {
          viewer._gr_report = xmlhttp.responseText;
          run();
        });
      } else {
        viewer._gr_report =
          typeof report === "object" ? JSON.stringify(report) : report;
        run();
      }
    } else {
      viewer._gr_report = "{}";
      run();
    }

    if (data) {
      if (grplugin_is_url(data)) {
        grplugin_http(
          data,
          function(xmlhttp) {
            viewer._gr_data = xmlhttp.responseText;
            run();
          },
          true,
          args.dataUrlParams
        );
      } else {
        viewer._gr_data =
          typeof data === "object" ? JSON.stringify(data) : data;
        run();
      }
    } else {
      viewer._gr_data = "{}";
      run();
    }
  }

  if (isdesigner) {
    id = id || "ReportDesigner";
  } else {
    id = id || "ReportViewer";
  }

  if (_gr_isIE) {
    if (isdesigner) {
      typeid = "CE666189-5D7C-42ee-AAA4-E5CB375ED3C7";
    } else {
      if (type === "printviewer") {
        typeid = "ABB64AAC-D7E8-4733-B052-1B141C92F3CE";
      } else {
        typeid = "600CD6D9-EBE1-42cb-B8DF-DFB81977122E";
      }
    }
    typeid = 'classid="clsid:' + typeid + gr_CodeBase;
  } else {
    typeid = 'type="application/x-grplugin6-' + type + '"';
  }

  plugin = document.getElementById("ReportViewer");

  //(!plugin || !plugin.Report) && MsgPluginFailed();
  console.log("plugin", plugin, "++", plugin.Report, "++");
  console.log("ajaxMode", ajaxMode);
  console.log("isdesigner", isdesigner);
  console.log("report", report);
  if (!plugin || !plugin.Report) {
    MsgPluginFailed();
    return;
  }
  oncreate && oncreate(plugin);

  if (ajaxMode) {
    if (isdesigner) {
      if (report) {
        AjaxDesignerOpen(plugin, report, args.onreportload);
      }

<<<<<<< .mine
    //(!plugin || !plugin.Report) && MsgPluginFailed();
    console.log("plugin", plugin, plugin.Report);
    console.log("ajaxMode", ajaxMode);
    console.log("isdesigner", isdesigner);
    console.log("report", report);
    if (!plugin || !plugin.Report) {
        // MsgPluginFailed();
        // return;
    }
    oncreate && oncreate(plugin);
=======
      if (data && !plugin.OnRequestData) {
        plugin.OnRequestData = function(Report) {
          SyncReportLoadData(Report, data); //这里必须是同步方式
        };
      }
>>>>>>> .r37690

      if (saveurl && !plugin.OnSaveReport) {
        plugin.OnSaveReport = function() {
          AjaxDesignerSave(plugin, saveurl);
          plugin.DefaultAction = false;
          alert(
            "报表模板设计已提交至服务器！\r\n(此提示信息可以在 CreateControl.js 文件中修改)"
          );
        };
      }
    } else {
      _viewerStart(plugin, args);
    }
  }
}

//////////////////////////////////////////////////////////////////////////
//应用工具类函数

//HTTP通讯获取数据函数。参数async为true为异步方式，默认为异步。
function grplugin_http(url, callback, async, url_params, url_method, cbthis) {
  console.log(
    "in grplugin_http",
    url,
    callback,
    async,
    url_params,
    url_method,
    cbthis
  );
  // debugger
  var xmlhttp = new XMLHttpRequest();

  function method_valid(url, method) {
    console.log("in method_valid", url, method);

    method =
      method ||
      (/.grf|.txt|.xml|.json|.png|.jpg|.jpeg|.bmp|.gif/.test(url)
        ? "GET"
        : "POST");
    console.log("method", method);
    return method;
  }

  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState === 4 && xmlhttp.status > 0) {
      if (xmlhttp.status === 200) {
        callback && callback.call(cbthis, xmlhttp);
      } else {
        window.open(url, "blank");
      }
    }
  };

  xmlhttp.onerror = function() {
    window.open(url, "blank");
  };

  //如果参数async没有定义，则默认为异步请求数据
  async = async || async === undefined;

  // xmlhttp.open("GET", "1a.grf?id=2839", true);
  // xmlhttp.open("GET", url, async);
  if (method_valid(url, url_method) === "GET") {
    xmlhttp.open(method_valid(url, url_method), url, async);
    // xmlhttp.open(method_valid(url, url_method), "http://localhost:3000/grf/1a.grf?id=6403", async);
    xmlhttp.setRequestHeader("Content-type", "application/octet-stream");
  } else if (method_valid(url, url_method) === "POST") {
    xmlhttp.open(
      method_valid(url, url_method),
      "http://10.20.5.35:3000/mock/439/disabledExamNote/getListData",
      async
    );
  }
  console.log(123123123);
  xmlhttp.send(url_params); //POST 或 PUT 可以传递参数
}

//此函数用于判断一个变量是否为URL字符串，如果类型为字符串且首个非空白字符不为“<”与“{”即判定为URL
var grplugin_is_url = function(p) {
  console.log("in  grplugin_is_url");

  var index = 0;
  var len = p.length;
  var ch;

  if (typeof p !== "string") {
    return 0;
  }

  //首先找到第一个非空白字符
  while (index < len) {
    ch = p[index];
    if (!/\s/g.test(ch)) {
      break;
    }
    index++;
  }

  return ch !== "{" && ch !== "<" && p.substr(index, 4) !== "_WR_";
};

//////////////////////////////////////////////////////////////////////////
function MsgPluginFailed() {
  console.log("in  MsgPluginFailed");
  //弹出alert提示信息，可修改为更适合的表述
  alert("创建插件失败，当前浏览器不支持插件，或插件在当前电脑上没有安装！");
}

export default {
  name: "",
  components: {},
  data() {
    return {};
  },
  computed: {},
  created() {
    console.log("created", 1234);
    console.log("InsertDisplayViewer", InsertDisplayViewer);
    console.log("prepareViewArgs", prepareViewArgs);
  },
  mounted() {
    InsertDisplayViewer(prepareViewArgs());
  },
  methods: {},
};
</script>
 
<style scoped lang = "less">
</style>