<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
//  删除文件
//  导入fs模块
let fs = require('fs')

//  删除文件
fs.unlink('del.txt',function(err){
    if(err){
        console.error('删除文件del.txt失败')
    }else{
        console.log('成功删除del.txt') 
    }
})//  引入fs模块
let fs = require('fs')

//  node读写文件有同步和异步的接口
// //  同步读取会阻塞JS
// let content = fs.readFileSync('hello.txt',{flag:'r',encoding:'utf-8'})
// console.log(content)

// //  异步读取
// fs.readFile('hello.txt',{flag:'r', encoding:"utf-8"},(err, data) => {
//     if(err){
//         console.log(err)
//         throw err
//     }
//     console.log(456)
// })
// console.log(123)

//  封装异步
//  用promise处理读取文件返回
function fsRead(path){
    return new Promise(function(resolve,reject){
        fs.readFile(path,{flag:'r', encoding:"utf-8"},(err, data) => {
            if(err){
                //  有错误，执行失败
                console.log(err)
                reject(err)
            }else{
                //  没错误，执行成功
                resolve(data)
            }
        })
    })
}

// //  直接读取
// fsRead('hello.txt').then(resolve => {
//     console.log(resolve)
// }).catch(reject => {
//     console.log(reject)
// })

// //  用async await来获取异步的值
// async function readContent(){
//     let content = await fsRead('hello.txt')
//     console.log(content)
// }
// readContent()

//  用 async await 函数来处理异步，读取多个文件
async function readMany(){
    let content = await fsRead('hello.txt')
    let content2 = await fsRead('hello2.txt')
    let content3 = await fsRead('hello3.txt')
    console.log(content)
    console.log(content2)
    console.log(content3)
}
readMany()

hello2//  介绍buffer缓冲区
//  1.数组不能进行二进制数据的操作
//  2.js数组不像java、python等语言效率高
//  3.buffer内存空间开辟出固定大小的内存
//  buffer一般用于神经网络

// //  使用buffer
// let str = 'hello, buffer'
// //  将字符串变成二进制存储
// let buf = Buffer.from(str)
// //  显示二进制
// console.log(buf)
// //  转化成字符串输出数据
// console.log(buf.toString())

//  开辟一个空的buffer(缓冲区)
let buf1 = Buffer.alloc(10)
// buf1[0] = 256
console.log(buf1)

//  allocUnsafe 相对于 alloc 不会对原本磁盘的空间进行重置，会保留默认信息，但是效率高
let buf2 = Buffer.allocUnsafe(10)
console.log(buf2)hello, node!这个是要删除的文件//  读取文件
//  引入fs模块
let fs = require('fs')

//  node读写文件有同步和异步的接口
// //  同步读取会阻塞JS
// let content = fs.readFileSync('hello.txt',{flag:'r',encoding:'utf-8'})
// console.log(content)

// //  异步读取
// fs.readFile('hello.txt',{flag:'r', encoding:"utf-8"},(err, data) => {
//     if(err){
//         console.log(err)
//         throw err
//     }
//     console.log(456)
// })
// console.log(123)

//  封装异步
//  用promise处理读取文件返回
function fsRead(path){
    return new Promise(function(resolve,reject){
        fs.readFile(path,{flag:'r', encoding:"utf-8"},(err, data) => {
            if(err){
                //  有错误，执行失败
                console.log(err)
                reject(err)
            }else{
                //  没错误，执行成功
                resolve(data)
            }
        })
    })
}

// //  直接读取
// fsRead('hello.txt').then(resolve => {
//     console.log(resolve)
// }).catch(reject => {
//     console.log(reject)
// })

// //  用async await来获取异步的值
// async function readContent(){
//     let content = await fsRead('hello.txt')
//     console.log(content)
// }
// readContent()

//  用 async await 函数来处理异步，读取多个文件
async function readMany(){
    let content = await fsRead('hello.txt')
    let content2 = await fsRead('hello2.txt')
    let content3 = await fsRead('hello3.txt')
    console.log(content)
    console.log(content2)
    console.log(content3)
}
readMany()

hello, test.txt
hello, test.txt
今天晚饭吃啥？
铁板牛扒
烤泥鳅
真棒！
hello3//  写入创建文件
//  引入fs模块
let fs = require('fs')
// write w 写入
// read r 读取
// append a 追加
fs.writeFile('./test.txt', 'hello, test.txt\n',{flag:'a', encoding:'utf-8'}, function(err){
    if(err){
        console.error('写入内容出错')
    }else{
        console.log('创建或修改test.txt成功了')
    }
})

//  封装写入
function writeFs(path, content){
    return new Promise(function(resolve,reject){
        fs.writeFile(path, content,{flag:'a', encoding:'utf-8'}, function(err){
            if(err){
                // console.error('写入内容出错')
                reject(err)
            }else{
                // console.log('创建或修改test.txt成功了')
                resolve()
            }
        })
    })
}

//  多次调用写入内容
async function writeList(){
    await writeFs('./test.txt', '今天晚饭吃啥？\n')
    await writeFs('./test.txt', '铁板牛扒\n')
    await writeFs('./test.txt', '烤泥鳅\n')
    await writeFs('./test.txt', '真棒！\n')
}
writeList()

//  生成html
async function writeHtml(){
    await writeFs('./add.html', '<p>1</p>\n')
    await writeFs('./add.html', '<p>2</p>\n')
    await writeFs('./add.html', '<p>3</p>\n')
    await writeFs('./add.html', '<p>4</p>\n')
}
writeHtml()